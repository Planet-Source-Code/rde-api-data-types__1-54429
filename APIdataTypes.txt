
' ------------------------------------------------------------------
'                         Win API Data types
' ------------------------------------------------------------------

  Windows API routines often require data types not used by VB.
  Here are some non-VB data types:

Any        Accepts different data types, must be passed ByRef with the
            exception of Strings.
Atom       Integer passed ByVal - ByVal num% or ByVal num As Integer
int,INT    Long integer passed ByVal - ByVal num& or ByVal num As Long
UINT       Long integer passed ByVal - ByVal num& or ByVal num As Long
Bool       Long integer passed ByVal - ByVal num& or ByVal num As Long
BYTE       Byte data passed ByVal - ByVal byt As Byte
Char       Byte data passed ByVal - ByVal byt As Byte
Coloref    Long integer passed ByVal. Used for specifying colours -
            ByVal arg& or ByVal arg As Long
HANDLE     Long integer passed ByVal - ByVal num& or ByVal num As Long
Word       Integer passed ByVal - ByVal num% or ByVal num As Integer
DWord      Long integer passed ByVal - ByVal num& or ByVal num As Long
WPARAM     Long integer passed ByVal - ByVal num& or ByVal num As Long
LPARAM     Long integer passed ByVal - ByVal num& or ByVal num As Long
LRESULT    Long integer passed ByVal - ByVal num& or ByVal num As Long
Null       Long integer data types used for uninitialized values, passed
            ByVal - ByVal arg& or ByVal arg As Long (uninitialized = 0&)
LPStr      String data type passed ByVal - ByVal str$ or ByVal str As String
            and may be modified by the recieving function as if passed ByRef.
LPCStr     String data type passed ByVal - ByVal str$ or ByVal str As String
            but will not be modified by the recieving function.
Structure  Complex data types often made up of more than one data type
            (data structures) e.g RECT, MSG (UDTs).

' ------------------------------------------------------------------

Converting C Declarations to Visual Basic

The procedures in DLLs are most commonly documented using C language syntax.
To call these procedures from Visual Basic, you need to translate them into
valid Declare statements and call them with the correct arguments.

As part of this translation, you must convert the C data types into Visual
Basic data types and specify whether each argument should be called by value
(ByVal) or implicitly, by reference (ByRef).

The following table lists common C language data types and their Visual Basic
equivalents for 32-bit versions of Windows.

C data type:      In VB declare as:             Call with:
   ATOM        ByVal variable As Integer     An expression that
                                              evaluates to an Integer
   BOOL        ByVal variable As Long        An expression that
                                              evaluates to a Long
   BYTE        ByVal variable As Byte        An expression that
                                              evaluates to a Byte
   CHAR        ByVal variable As Byte        An expression that
                                              evaluates to a Byte
  COLORREF     ByVal variable As Long        An expression that
                                              evaluates to a Long
   DWORD       ByVal variable As Long        An expression that
                                              evaluates to a Long
 HWND, HDC,    ByVal variable As Long        An expression that
 HMENU, etc                                   evaluates to a Long
 INT, UINT     ByVal variable As Long        An expression that
                                              evaluates to a Long
   LONG        ByVal variable As Long        An expression that
                                              evaluates to a Long
  LPARAM       ByVal variable As Long        An expression that
                                              evaluates to a Long
  LPDWORD      ByRef variable As Long        An expression that
                                              evaluates to a Long
LPINT, LPUINT  ByRef variable As Long        An expression that
                                              evaluates to a Long
  LPRECT       ByRef variable As UDT         Any variable of that
                                              user-defined type
LPSTR, LPCSTR  ByVal variable As String      An expression that
                                              evaluates to a String
  LPVOID       ByRef variable As Any         Any variable (use ByVal
                                              when passing a string)
  LPWORD       ByRef variable As Integer     An expression that
                                              evaluates to an Integer
  LRESULT      ByVal variable As Long        An expression that
                                              evaluates to a Long
   NULL        As Any or                     ByVal Nothing or ByVal 0&
               ByVal variable As Long         or vbNullString
  SHORT        ByVal variable As Integer     An expression that
                                              evaluates to an Integer 
   VOID        Sub procedure                 Not applicable
   WORD        ByVal variable As Integer     An expression that
                                              evaluates to an Integer
  WPARAM       ByVal variable As Long        An expression that
                                              evaluates to a Long
' ------------------------------------------------------------------

A UINT is an unsigned 32 bit value, while an INT is a signed
32 bit value.

' ------------------------------------------------------------------

Some Windows API functions return a Boolean value, but the Windows
BOOL type isn’t the same as a Basic Boolean.

A Windows BOOL is actually a Long integer, which is 32 bits wide.
In other words, a Boolean is the same size as a VB Long.

Although you should declare what Windows calls BOOL as Long, you
can assign the result to a Boolean. Basic automatically performs
the type conversion from Long to Boolean on return values.

' ------------------------------------------------------------------

The lParam parameter is particularly interesting. It is a 32-bit
long integer, which happens to be the size of a pointer, and this
value is often used to pass a pointer to a String or a UDT.

In other words, lParam is typeless. The Windows API type library
defines LPARAM as LPVOID, which is the type library equivalent of
As Any. In Visual Basic, that means that any API declaration that
contains lParam can be declared As Any.

' ------------------------------------------------------------------

You pass UDTs (structures in C) to Windows API functions by reference
for three possible reasons.

- The first is the same reason you pass integers by reference — so that
  you can get something back.
- The second is that most UDT variables are too large to pass efficiently
  by value.
- The third and deciding reason is that Basic won’t let you pass them by
  value even if you want to.

In a Get function, it must be passed by reference so that Windows can fill
in the new value. In a Set function, it’s passed by reference only to avoid
wasting stack space - sometimes declared as LPCVOID, where the C specifies
that this parameter should be handled as a Constant (left un-altered).

Like UDTs, arrays must be passed by reference, and for the same reasons.
The big difference is that Windows knows the size of a UDT used by an API
function, but it doesn’t know how many elements an array contains. In fact,
that’s usually the reason you pass arrays to Windows — so that you can give
varying numbers of elements. This means, however, that the API function
needs to ask for the length in a separate parameter.

The reason an array is passed by reference is that in C an array is
actually the address of the first element. If you pass a variable by
reference, you’re actually passing its address, which is just what C
(and Windows) thinks an array is.

Another way to see this is to think of a variable as an array with one
element. That’s why the API declaration looks exactly as it would if
the function took one by-reference variable instead of an array of them.

' ------------------------------------------------------------------

When some functions fail, their return value is NULL. In VB NULL
equates to vbEmpty in Variants, or just zero in Long ints.

' ------------------------------------------------------------------

In the Windows API, you usually pass integers by value using the ByVal
attribute. The table below lists the kinds of integers you’ll see in
the API documentation and shows how to handle them in Declare statements.

Integers in the Windows API:
Windows API    Visual Basic
int,INT        ByVal Long
UINT           ByVal Long
BOOL           ByVal Long
WORD           ByVal Integer
DWORD          ByVal Long
WPARAM         ByVal Long
LPARAM,LRESULT ByVal Long
COLORREF       ByVal Long
ATOM           ByVal Integer
HANDLE(,etc)   ByVal Long
BYTE           ByVal Byte
char           ByVal Byte

' ------------------------------------------------------------------

Here’s a simple integer example. The Win32 documentation shows
FloodFill as follows:

BOOL FloodFill(
    HDC hDC,            // Handle of device context
    int nXStart,        // X-coordinate of starting position
    int nYStart,        // Y-coordinate of starting position
    COLORREF crFill     // Color of fill boundary
);

You declare it this way in Visual Basic:

Declare Function FloodFill Lib "GDI32" _
   (ByVal hDC As Long, _
    ByVal nXStart As Long, _
    ByVal nYStart As Long, _
    ByVal crFill As Long) As Long

' ------------------------------------------------------------------

Windows API documentation usually shows pointers with defined
pointer types such as LPDWORD and LPHWND. (See Table below.)

These are actually aliases (called typedefs in C) for DWORD * and
HWND *. The LP in the type names apparently meant long pointer,
which is what everyone in the world except the author of this
strange convention called far pointers. Also, lp is a Hungarian
prefix for parameter names. Almost all pointers are far.

You might also occasionally see FAR * in the API documentation, but
you should ignore it. It’s just an alias for nothing, retained for
theoretical compatibility with mythical ancient operating systems.

Pointers to integers in the Windows API:
Windows API        32-Bit VB
LPINT,int *        Long
LPUINT,UINT *      Long
LPBOOL,BOOL *      Long
LPBYTE,BYTE *      Byte
LPWORD,WORD *      Integer
LPDWORD,DWORD *    Long
LPHANDLE,HANDLE *,
      and similar  Long

' ------------------------------------------------------------------

The GetScrollRange function illustrates how and why to pass integers
by reference. It needs to return two Longs — the top and bottom of the
scroll range — so it uses pointers to Longs to return them.

The Windows API documentation shows this:

BOOL GetScrollRange(
    HWND hwnd,          // Handle of window with scroll bar
    int nBar,           // Scroll bar flags
    LPINT lpMinPos,     // Receives minimum position
    LPINT lpMaxPos      // Receives maximum position
);

The VB declaration looks like this:

Declare Function GetScrollRange Lib "User32" _
   (ByVal hWnd As Long, _
    ByVal nBar As Long, _
    lpMinPos As Long, _
    lpMaxPos As Long) As Long

Or you could code it like this:

Declare Function GetScrollRange Lib "User32" _
   (ByVal hWnd As Long, _
    ByVal nBar As Long, _
    ByRef lpMinPos As Long, _
    ByRef lpMaxPos As Long) As Long

Calling the function is simple:

Dim iMin As Long, iMax As Long
f = GetScrollRange(txtTest.hWnd, SB_HORZ, iMin, iMax)

' ------------------------------------------------------------------

Large Integers and Currency

Windows and COM sometimes use 64-bit integers, and Visual Basic
actually provides a 64-bit integer type called Currency.

But, you say, Currency isn’t an integer type, it’s a fixed-point
type. Well, yes, but the bits are the same. It’s just that behind
the scenes, COM Automation is moving a decimal point four places
to the left on all currency integers.

One of the best places to use Currency is with the
QueryPerformanceCounter API function and its friend,
QueryPerformanceFrequency.

The C version looks like this:

BOOL QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount);
BOOL QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency);
// LARGE_INTEGER = address of current frequency

The Visual Basic version would look like this:

Declare Function QueryPerformanceCounter _
        Lib "kernel32" (lpPerformanceCount As LARGE_INTEGER) As Long
Declare Function QueryPerformanceFrequency _
        Lib "kernel32" (lpFrequency As LARGE_INTEGER) As Long

Type LARGE_INTEGER
    lowpart As Long
    highpart As Long
End Type

But you can declare them like this:

' Performance counter API's
Declare Function QueryPerformanceCounter _
        Lib "kernel32" (lpPerformanceCount As Currency) As Long
Declare Function QueryPerformanceFrequency _
        Lib "kernel32" (lpFrequency As Currency) As Long

The QueryPerformanceCounter function gives a high accuracy timing
count that can be used in place of less accurate timing counts from
API functions such as timeGetTime or GetTickCount.

Private mCurFreq As Long

Function ProfileStart() As Currency
    Dim curStart As Currency
    If mCurFreq = 0 Then QueryPerformanceFrequency mCurFreq
    QueryPerformanceCounter curStart
    ProfileStart = curStart
End Function

secStart = ProfileStart()

Function ProfileStop(ByVal curStart As Currency) As Currency
    Dim curStop As Currency
    QueryPerformanceCounter curStop
    If mCurFreq = 0 Then
        ProfileStop = 0 ' Handle no high-resolution timer
    Else
        ProfileStop = (curStop - curStart) / mCurFreq
    End If
End Function

secElapse = ProfileStop(secStart)

QueryPerformanceCounter returns a counter too accurate to fit in a Long.

You can turn this timer number (which might vary in accuracy depending
on your hardware) into a recognizable number by dividing by the number
of counts per second, as returned by QueryPerformanceFrequency.

Normally, you’ll be subtracting a beginning count from an ending count
and then dividing by the frequency to get a duration.

The result comes out nicely as a fixed-point Currency number representing
seconds accurate to four decimal places. Multiply by 1000 to convert to
millisecond (or by 1000000 for microseconds).

millisecond = one thousandth of a second
microsecond = one millionth of a second (one thousandth of a millisecond)

' ------------------------------------------------------------------

There are other places you could use Currency. For example, Win32 stores
file time values as 64-bit integers in a FILETIME structure that looks a
lot like a LARGE_INTEGER structure:

Type FILETIME
    dwLowDateTime As Long
    dwHighDateTime As Long
End Type

Windows won’t know or care whether the bits you pass on the stack are
Currency, FILETIME, or LARGE_INTEGER. Use Currency rather than FILETIME.

It’s also useful for disk sizes, used with GetDiskFreeSpaceEx. You must
remember that COM places a decimal point in the assigned currency value.

The tricky part is getting VB to turn off its data typing so that you
can pass different kinds of data.

The Alias attribute of the Declare statement and the Any parameter
type enable you to lie, cheat, steal, and have your way with data.

' ------------------------------------------------------------------

Declare Function GetObject Lib "gdi32" Alias "GetObjectA" ( _
                       ByVal hObject As Long, ByVal nCount As Long, _
                       ByRef lpObject As Any) As Long

Where an API function requires arguments As Any (sometimes LPVOID)
you can build in safety by declaring multiple versions of the same
DLL function:

Declare Function GetObjectBrush Lib "GDI32" Alias "GetObjectA" ( _
                       ByVal hBrush As Long, ByVal cbBuffer As Long, _
                       ByRef lpBrush As LOGBRUSH) As Long

Declare Function GetObjectBitmap Lib "GDI32" Alias "GetObjectA" ( _
                       ByVal hBitmap As Long, ByVal cbBuffer As Long, _
                       ByRef lpBitmap As BITMAP) As Long

' Logical Brush (or Pattern)
Type LOGBRUSH
    lbStyle As Long
    lbColor As Long
    lbHatch As Long
End Type

' Bitmap Header Definition
Type BITMAP '14 bytes
    bmType As Long
    bmWidth As Long
    bmHeight As Long
    bmWidthBytes As Long
    bmPlanes As Integer
    bmBitsPixel As Integer
    bmBits As Long
End Type

Dim bmp As BITMAP
rc = GetObjectBitmap(pbBitmap.Picture, Len(bmp), bmp)

That’s easy enough if you happen to know that the Picture property
of a picture box containing a bitmap is actually a bitmap handle.

But you’d better be sure that whatever gets passed to the function
is what you say it is.

' ------------------------------------------------------------------

Dealing with Strings

Visual Basic 3’s string type was the HLSTR (High Level String). This
consisted of a pointer to a block of memory containing the length of
the string and a pointer to the string itself.

Since Visual Basic 4, the string type has been the BSTR, which is a
pointer to the start of the string — and the string itself is null-
terminated.

The string is also immediately preceded in memory by 4 bytes containing
the string’s length.

A VB string is a handle to a Basic language string. These are roughly
similar to Pascal strings — the size is stored separately from the
characters — with a terminating Chr$(0).

This format permits any character, including Chr$(0), to be in a string.

Care must be taken in the Visual Basic declarations because VB strings
and C strings are very different creatures.

The designers of VB enabled Basic-to-C conversion by overloading the
ByVal attribute to mean something other than what its name implies.

The declaration for the API function must use ByVal for C to receive a
string correctly.

When you declare the function argument using ByVal, this tells Visual
Basic to pass the string as a null-terminated C style string.

Thus, the declaration looks like this:

   Declare Sub passOneString Lib "mydll.dll" (ByVal lpszBuf As String)

The actual internals of the C function are straightforward while it
receives the argument as a standard C string.

' ------------------------------------------------------------------

An integer is an integer in any language, but every language has its
own ideas about strings.

In VB, a string is supposed to be a black box. You put data in through
Basic statements; the system allocates, moves, and resizes the data
without your knowledge or interference; you get data back in the
expected format.

In C, in contrast, you must understand exactly how strings are stored
in memory to process them correctly and efficiently.

Nothing is allocated, moved, or resized unless you do it.

This fundamental difference between C strings and Basic strings is
probably the biggest problem you face in dealing with the Windows API.

Essentially, you have to get un-Basic with strings — you have to know
what Basic programmers aren’t supposed to know.

The C string format, known in API jargon as LPSTR, is a sequence of
characters terminated by the null character (ASCII 0). The LPWSTR
format is the same except that it uses 16-bit Unicode characters.

In the Windows API documentation, C string parameters have the type
LPCTSTR if the string is to be used only as input. The C in the name
indicates constant, that is, it will not be modified.

Parameters have the type LPTSTR if the string is to be used as an
output buffer filled by the function. The T in the names indicates
that the string could be either ANSI (LPCSTR or LPSTR) or Unicode
(LPWCSTR or LPWSTR), depending on constants passed to the C compiler
at compile time.

As a Basic programmer, you must make an unnatural distinction when
passing strings to the Windows API. Even when passing a variable to
be assigned a string you still pass it ByVal.

Passing a string by value doesn’t actually pass it by value. Doing so
would imply that all the bytes of the string are placed on the stack.

Instead, Basic simply passes by value a pointer to the string. In VB3,
Basic also needed to ensure that the HLSTR was null terminated, which
sometimes meant that the string had to be copied to a temporary string
for processing by Windows and then copied back to the real VB version
afterward in case Windows modified the string copy.

Those days are over because BSTRs are already null terminated. Now VB
makes a temporary copy for a completely different reason - Unicode
conversion.

Because a string variable in VB is in fact a pointer to the string,
you must pass strings by value. Therefore, it is necessary to pass
strings by value in order to pass the location of the string data,
as opposed to passing the location of the string descriptor.

What's really going on here? The string "string" appears to be 6
characters long, but because it includes a terminating null character
the real length is 7 characters.

Internally, the string also includes a preceding Long that contains
the length of the string. Therefore, the string uses 11 bytes of memory,
although the stored length is 6, which is what Basic would expect.
That's 6 double-byte characters remember.

Basic needs to know the length of the string at all times. The Basic
Len function grabs the length out of the preceding length placeholder
(using the SysStringLen function) without checking the characters.

When you pass the string to the Windows API, however, the length is
lost. Because it’s written in C, Windows doesn’t know or care how
long a string is.

Basic promises that when it passes a string with the ByVal attribute,
the string will be converted and so will be null terminated and the
address of the first character will be passed on to the stack.

The Windows API promises that if the string is constant (LPCTSTR),
it will not modify the string.

But this contract is less than bulletproof. Windows expects that the
string will contain only one null character, the last.

Basic makes no such promise. A passed string could have multiple null
characters, which are perfectly legal in a Basic string.

You as the programmer must ensure that the strings you pass don’t have
inappropriate embedded nulls. As a practical matter, however, this
usually isn’t a problem because Basic programmers accessing the Windows
API know not to embed nulls in strings intended for Windows functions.

' ------------------------------------------------------------------

Passing Null Pointers

If C were a type-safe language like Basic, passing input strings to
the Windows API would always be simple, but many Windows API functions
accept a null pointer for string parameters.

When you pass a normal string, you are actually passing a pointer to
the characters of the string — in other words, the address of the first
character.

But the C language and the Windows API recognize one special pointer
that represents no address. The value of this pointer is 0, but it
doesn’t represent address 0 even if that address is valid in the
current environment. The Null pointer is used as a signal to ignore
a given parameter. You can pass the predefined constant vbNullString
as a string argument.

You might try passing 0& instead of vbNullString, VB and Windows will
allow this without complaint, but because VB sees that the function
wants a string, it politely (read secretly) converts 0& to "0". This
may be OK, but will probably get erroneous results.

The Null pointer indicates to Windows to ignore the argument, while
the "0" will be treated as input to be processed.

The null character is ASCII character 0. You can represent this string
as Chr$(0), but it’s more efficient to use the constant vbNullChar.

But most often vbNullChar will not be correct; vbNullString represents
an empty string, vbNullChar is an ASCII character (a one byte string)
that happens to be used by Windows to indicate the end of a string.

' ------------------------------------------------------------------

Strings in Callback Procedures

Your first try might look something like this:

Function EnumResTypeProc(ByVal hModule As Long, _
                         ByVal lpszType As String, _
                         lParam As Long) As Long

That’s how you would write the parameters if you were writing a Declare
statement for a function to be called from Basic. You’d use a String type
for lpszType, knowing that Basic would automatically translate to Unicode.

But you’re not writing a Declare statement; you’re writing a function. And
it won’t be called by Basic; it will be called by Windows. And Windows hasn’t
a clue about the String type.

The only way Windows is going to understand what to do is if you write the
function like this:

Function EnumResTypeProc(ByVal hModule As Long, _
                         ByVal lpszType As Long, _
                         lParam As Long) As Long

Windows will pass you a pointer to the string, but then what will you do with
it in Basic? By now you should have figured out what you can do when the API
passes a pointer: pass it on.

Declare Sub GetMessageStr Lib "kernel32" Alias "RtlMoveMemory" _
    (ByVal lpvDestBuf As String, ByVal lpvSrcMap As Long, _
     ByVal cbCopyLength As Long)

Declare Function StrLen Lib "kernel32" Alias "lstrlenA" _
    (ByVal lpString As String) As Long
Declare Function StrLenPtr Lib "kernel32" Alias "lstrlenA" _
    (ByVal lpString As Long) As Long

The hack to convert an API pointer requires some API calls,
so I wrap it in a function called PointerToString:

Function PointerToString(pStr As Long) As String
    Dim temp As String
    Dim cLen As Long
    cLen = StrLenPtr(pStr)
    temp = String$(cLen, Chr$(0))
    GetMessageStr temp, pStr, cLen
    PointerToString = temp
End Function

This looks simple, but if measured in the hours it took me to figure it out,
PointerToString would be a pretty long function.

First you get the length of the string. The normal version of the lstrlen
function takes a string argument, but in this case we have a pointer, not
a string, so you must use the StrLenPtr alias.

Keep in mind that StrLenPtr might actually be lstrlenA or lstrlenW, depending
on whether the API type library you have loaded is WIN.TLB or WINU.TLB.

In either case, it returns the internal string length so that you can create
a Basic string to hold it.

' ------------------------------------------------------------------

' Fixed-Length Strings in UDTs

Const MAX_PATH = 260

typedef struct _WIN32_FIND_DATA {
    // etc
    TCHAR    cFileName[ MAX_PATH ]; // 260
    TCHAR    cAlternateFileName[ 14 ];
} WIN32_FIND_DATA;

' In Basic, it looks like this:

Public Type WIN32_FIND_DATA
    ' etc
    cFileName As String * MAX_PATH ' 260
    cAlternateFileName As String * 14
End Type

' ------------------------------------------------------------------

Most Windows DLL's contain different (but similar) functions, named
with a W or A suffix. The W handles 16-bit Unicode strings.

The A handles the 8-bit ANSI character strings that most programmers
are used to. For now, all you need to know is that every Win32 function
that deals with strings requires similar aliases to A suffixed functions.

You will probably want to use the ANSI version in most cases because it
works for both Windows 95 and Windows NT, but you’ll get slightly better
performance in Windows NT–only programs if you use the Unicode version.

If you use Declare statements, you have no choice: you must use the ANSI
alias because the Declare statement is still crippled and unable to deal
with Unicode directly.

You have to use a type library (like the one supplied with this book) to
use the Unicode versions.

' ------------------------------------------------------------------

Left to their own devices, Basic will pass by reference, and C will
receive by value.

When the caller passes its argument using the default Basic convention
of calling by reference it puts the address of the variable being passed
on the stack.

Giving another procedure an address is an act of trust. You’ve given
away the key to modifying whatever is located at that address (and,
incidentally, any adjacent addresses).

Technically, reads and writes are done indirectly through a pointer;
an operation that takes a little more processing than modifying a
variable directly. Basic hides this, however, and makes writing to a
by-reference parameter look the same as writing to any other variable.

It turns out that passing a constant by reference is perfectly legal,
but Basic implements this feature by creating a temporary variable and
passing the address of that variable.

The function receiving ByRef could then write to that variable (using
its argument alias), but the caller wouldn’t be able to check the results
because it wouldn’t have a name for the temporary variable.

When passing ByVal, caller and callee treat the argument in completely
different ways. Instead of copying the address of the argument onto the
stack, the caller copies the value. If the callee were to modify the
argument variable, the stack value would change, but this value will
disappear as soon as the callee returns. 

How does the timing of arguments passed by value compare to the timing
of arguments passed by reference (the default)?

Problem                  Native Code     P-Code

Integer by value         0.0063 sec      0.2508 sec
Integer by reference     0.0069 sec      0.2518 sec
Long by value            0.0073 sec      0.2563 sec
Long by reference        0.0072 sec      0.2553 sec
Single by value          0.0072 sec      0.2521 sec
Single by reference      0.0073 sec      0.2585 sec
Double by value          0.0078 sec      0.2579 sec
Double by reference      0.0073 sec      0.2599 sec
Variant by value         0.1585 sec      0.5561 sec
Variant by reference     0.0602 sec      0.4222 sec
String by value          0.3388 sec      0.8279 sec
String by reference      0.1669 sec      0.5901 sec

A reference variable is always four bytes, with the exception of
Variants. Therefore, there is no significant difference between
passing intrinsic numeric types byval or byref. If you pass all 16
bytes of a Variant by value onto the stack, it’s going to cost you.

Strings work a little differently; you’re not really saving the
whole string on the stack when you pass a string by value, you are
making an extra copy though. Always pass strings by reference in
your Basic code. Calling API functions is a different matter.

When you are dealing with Windows API calls, the primary factor is
what Windows tells you to do. When Windows chooses one method or
another in different circumstances it tells you something about the
way the callee will handle your data, and also the way you should
code your caller.

Most arguments should be passed by value, but there are a lot of
exceptions.

' ------------------------------------------------------------------

Much of this information comes from Hard Core VB by Bruce McKinney,
(else is part of the Win API documentation), from the MSDN Library.
